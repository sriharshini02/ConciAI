from django.db import models
from django.utils import timezone
import json  # Used for JSONField default and potentially for cleaner entity handling


# Model 1: Hotel
# Represents a single hotel using the Conci system.
# In a multi-tenant setup, each instance of this model would be a different hotel client.
class Hotel(models.Model):
    name = models.CharField(max_length=255, unique=True, help_text="Name of the hotel.")
    # For future multi-tenancy with external AI services,
    # each hotel might have its own API key or configuration.
    # For MVP, this might be optional or shared.
    api_key = models.CharField(
        max_length=255,
        blank=True,
        null=True,
        help_text="API key for AI services specific to this hotel (optional).",
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Hotel"
        verbose_name_plural = "Hotels"

    def __str__(self):
        return self.name


# Model 2: Amenity
# Represents a list of amenities that can be requested by guests.
# This allows for easy management of available services via the Django admin.
class Amenity(models.Model):
    name = models.CharField(
        max_length=100,
        unique=True,
        help_text="Name of the amenity (e.g., 'Extra Towels', 'Toothbrush').",
    )
    description = models.TextField(
        blank=True, help_text="Brief description of the amenity."
    )
    price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        null=True,
        blank=True,
        help_text="Optional: Price of the amenity.",
    )

    class Meta:
        verbose_name = "Amenity"
        verbose_name_plural = "Amenities"
        ordering = ["name"]  # Order amenities alphabetically

    def __str__(self):
        return self.name


# Model 3: GuestRequest
# Stores details of each voice request made by a guest.
class GuestRequest(models.Model):
    # Foreign key to the Hotel model, indicating which hotel this request belongs to.
    hotel = models.ForeignKey(
        Hotel,
        on_delete=models.CASCADE,
        related_name="guest_requests",
        help_text="The hotel where this request originated.",
    )
    room_number = models.CharField(
        max_length=20, help_text="The room number where the request was made."
    )

    # Timestamp of when the request was initiated by the guest.
    timestamp = models.DateTimeField(
        default=timezone.now, help_text="Date and time when the request was made."
    )

    # The raw text received from the simulated guest interface (or STT in real hardware).
    raw_text = models.TextField(
        help_text="The raw transcribed text of the guest's request."
    )

    # The intent identified by the AI (e.g., 'request_amenity', 'get_wifi_password').
    ai_intent = models.CharField(
        max_length=100, help_text="The intent recognized by the AI."
    )

    # A JSON field to store extracted entities (e.g., {'amenity': 'towel', 'quantity': 2}).
    # 'blank=True' added here to make it optional in forms.
    ai_entities = models.JSONField(
        default=dict,
        blank=True,  # <--- IMPORTANT: This line was added for the admin form validation
        help_text="JSON representation of entities extracted by the AI (e.g., {'amenity': 'towel', 'quantity': 1}).",
    )

    # The response text generated by Conci for the guest.
    conci_response_text = models.TextField(
        help_text="The text response Conci gave to the guest."
    )

    # Status of the request for hotel staff management.
    # Choices are defined below to ensure consistent statuses.
    STATUS_CHOICES = [
        ("pending", "Pending"),
        ("in_progress", "In Progress"),
        ("completed", "Completed"),
        ("cancelled", "Cancelled"),
    ]
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default="pending",
        help_text="Current status of the guest request.",
    )

    # Optional field for staff to add notes or context.
    staff_notes = models.TextField(
        blank=True, help_text="Notes added by hotel staff regarding the request."
    )

    # Timestamp when the status was last updated.
    last_updated_by_staff = models.DateTimeField(
        auto_now=True, help_text="Timestamp of the last status update by staff."
    )

    class Meta:
        verbose_name = "Guest Request"
        verbose_name_plural = "Guest Requests"
        ordering = ["-timestamp"]  # Order requests by most recent first

    def __str__(self):
        return f"Room {self.room_number} - {self.ai_intent} ({self.status}) at {self.timestamp.strftime('%Y-%m-%d %H:%M')}"


# Model 4: HotelConfiguration
# Stores hotel-specific configuration details that Conci needs to access (e.g., Wi-Fi password).
class HotelConfiguration(models.Model):
    hotel = models.ForeignKey(
        Hotel,
        on_delete=models.CASCADE,
        related_name="configurations",
        help_text="The hotel this configuration belongs to.",
    )
    key = models.CharField(
        max_length=100,
        help_text="Configuration key (e.g., 'wifi_password', 'checkout_time').",
    )
    value = models.TextField(help_text="Configuration value.")

    class Meta:
        verbose_name = "Hotel Configuration"
        verbose_name_plural = "Hotel Configurations"
        unique_together = (
            "hotel",
            "key",
        )  # Ensure each hotel has a unique key for configurations

    def __str__(self):
        return f"{self.hotel.name} - {self.key}: {self.value}"
